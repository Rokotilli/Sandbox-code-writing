<UserControl x:Class="SandboxTestProject.Views.SandBoxView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:SandboxTestProject.Views"
             mc:Ignorable="d" 
             Background="#f4f4f4"
             d:DesignHeight="450" d:DesignWidth="800"
             xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
             xmlns:helpers="clr-namespace:SandboxTestProject.Helpers"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

    <Grid Background="{DynamicResource BackgroundBrush}">
        <Grid.RowDefinitions>
            <RowDefinition MinHeight="100"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition MinHeight="100"/>
            <RowDefinition Height="Auto" MinHeight="50"/>
        </Grid.RowDefinitions>
        <ComboBox
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            FontWeight="Bold"
            Width="160"
            Height="22"
            SelectedItem="{Binding SelectedLanguage, Mode=TwoWay}"
            ItemsSource="{Binding Languages}"
            Grid.Row="0">

            <ComboBox.Style>
                <Style TargetType="ComboBox">
                    <Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundBrush}" />
                    <Setter Property="Background" Value="{DynamicResource ComboBoxBackgroundBrush}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="Padding" Value="4,2" />
                    <Setter Property="FontSize" Value="14" />

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBox">
                                <Grid>
                                    <Border x:Name="Border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="4"
                                            SnapsToDevicePixels="True">

                                        <DockPanel Margin="0">
                                            <ContentPresenter
                                                VerticalAlignment="Center"
                                                Margin="5,0,0,0"
                                                Content="{TemplateBinding SelectionBoxItem}"
                                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                RecognizesAccessKey="True"/>

                                            <ToggleButton
                                                Name="ToggleButton"
                                                DockPanel.Dock="Right"
                                                Focusable="False"
                                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                Background="Transparent"
                                                BorderBrush="{x:Null}">

                                                <Grid Width="20" Height="20">
                                                    <Path
                                                        Data="M 0 0 L 8 0 L 4 5 Z"
                                                        Fill="{DynamicResource ComboBoxArrowBrush}"
                                                        HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"/>
                                                </Grid>
                                            </ToggleButton>
                                        </DockPanel>
                                    </Border>

                                    <Popup
                                        Name="Popup"
                                        Placement="Bottom"
                                        IsOpen="{TemplateBinding IsDropDownOpen}"
                                        AllowsTransparency="True"
                                        Focusable="False"
                                        PopupAnimation="Slide">

                                        <Border
                                            Background="{DynamicResource ComboBoxPopupBackgroundBrush}"
                                            BorderBrush="{DynamicResource ComboBoxPopupBorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4"
                                            SnapsToDevicePixels="True">

                                            <ScrollViewer>
                                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource ComboBoxMouseOverBackgroundBrush}" />
                                    </Trigger>

                                    <Trigger Property="IsFocused" Value="True">
                                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ComboBoxFocusedBorderBrush}" />
                                    </Trigger>

                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="Gray" />
                                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource ComboBoxPopupBackgroundBrush}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ComboBox.Style>
        </ComboBox>

        <Label
            Content="{Binding Source={StaticResource Loc}, Path=[MemoryLimit]}"
            HorizontalAlignment="Right"
            FontFamily="Calibri"
            FontSize="15"
            Margin="0,-3,463,0"
            VerticalAlignment="Top" Grid.Row="0" Height="28" Width="121"/>

        <xctk:IntegerUpDown
            Text="{Binding MemoryLimit, Mode=TwoWay}"
            Background="{DynamicResource BackgroundBrush}"
            Foreground="{DynamicResource ForegroundBrush}"
            TextAlignment="Left"
            DefaultValue="262144"
            DisplayDefaultValueOnEmptyText="True"
            Minimum="1"
            Maximum="262144"
            HorizontalAlignment="Right"
            Margin="0,0,300,0"
            VerticalAlignment="Top"
            Width="158"
            Height="23" Grid.Row="0"/>

        <Label
            Content="{Binding Source={StaticResource Loc}, Path=[TimeLimit]}"
            HorizontalAlignment="Right"
            FontFamily="Calibri"
            FontSize="15"
            Margin="0,-3,161,0"
            VerticalAlignment="Top" Grid.Row="0" Height="28" Width="134"/>

        <xctk:IntegerUpDown
            Text="{Binding TimeLimit, Mode=TwoWay}"
            Background="{DynamicResource BackgroundBrush}"
            Foreground="{DynamicResource ForegroundBrush}"
            TextAlignment="Left"
            DefaultValue="5"
            DisplayDefaultValueOnEmptyText="True"
            Minimum="1"
            Maximum="5"
            HorizontalAlignment="Right"
            VerticalAlignment="Top" 
            Width="158"
            Height="22" Grid.Row="0"/>

        <avalonEdit:TextEditor 
            Name="CodeEditor"
            Background="{DynamicResource AvalonBackground}"
            Foreground="{DynamicResource ForegroundBrush}"
            ShowLineNumbers="True"
            SyntaxHighlighting="{Binding SyntaxHighlighting}"
            FontFamily="Consolas"
            FontSize="14"
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Auto"
            Padding="10" Margin="0,25,0,1"
            helpers:AvalonTextEditorHelper.BindableText="{Binding CodeText, Mode=TwoWay}"
            Grid.Row="0"/>

        <GridSplitter Height="2"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Center"
                      Background="Gray"
                      ResizeDirection="Rows" Grid.Row="1">
        </GridSplitter>

        <Label
            Content="{Binding Source={StaticResource Loc}, Path=[Result]}" 
            FontFamily="Calibri"
            HorizontalContentAlignment="Center"
            FontSize="20"
            Margin="0,1,0,0" Grid.Row="2" Height="33" VerticalAlignment="Top"/>

        <TextBox
            Text="{Binding ResultText, Mode=TwoWay}"
            Margin="0,34,0,10"
            TextWrapping="Wrap"
            IsReadOnly="True" Grid.Row="2"/>

        <Button 
            Command="{Binding NavigateToHomeViewCommand}"
            Content="{Binding Source={StaticResource Loc}, Path=[Back]}"
            FontFamily="Calibri"
            Foreground="Black"
            Margin="10,0,0,26"
            FontSize="20" HorizontalAlignment="Left" Width="172" Height="40" VerticalAlignment="Bottom" Grid.Row="3">

            <Button.Template>
                <ControlTemplate TargetType="Button">
                    <Border Background="{DynamicResource ButtonNormalBackground}" CornerRadius="10" x:Name="border">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressedBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Button.Template>
        </Button>

        <Button 
            Command="{Binding RunCodeCommand}"
            Content="{Binding Source={StaticResource Loc}, Path=[RunCode]}"
            FontFamily="Calibri"
            Foreground="Black"
            Margin="207,0,0,26"
            FontSize="20" HorizontalAlignment="Left" Width="172" Height="40" VerticalAlignment="Bottom" Grid.Row="3">

            <Button.Template>
                <ControlTemplate TargetType="Button">
                    <Border Background="{DynamicResource ButtonNormalBackground}" CornerRadius="10" x:Name="border">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressedBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Button.Template>
        </Button>
        <Button 
            Command="{Binding CheckCodeEvaluationCommand}"
            Content="{Binding Source={StaticResource Loc}, Path=[CheckStatus]}"
            FontFamily="Calibri"
            IsEnabled="{Binding IsCheckStatusButtonEnabled}"
            Foreground="Black"
            Margin="0,0,207,26" 
            VerticalAlignment="Bottom"
            Height="40"
            FontSize="20" Grid.Row="3" HorizontalAlignment="Right" Width="172">

            <Button.Template>
                <ControlTemplate TargetType="Button">

                    <Border Background="{DynamicResource ButtonNormalBackground}" CornerRadius="10" x:Name="border">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressedBackground}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressedBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Button.Template>
        </Button>
        <Button 
            Command="{Binding OpenLeetCodeProblemsCommand}"
            Content="{Binding Source={StaticResource Loc}, Path=[OpenLeetCodeProblems]}"
            FontFamily="Calibri"
            Foreground="Black"
            Margin="0,0,10,26"
            FontSize="15" Height="40" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="189" Grid.Row="3">

            <Button.Template>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Background="{DynamicResource ButtonNormalBackground}" CornerRadius="10" x:Name="border">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonPressedBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Button.Template>
        </Button>
    </Grid>
</UserControl>